import * as heap from "./heap.js";

export function code(key, nonce, text) {
  'use strict';
  const asm_heap = heap.allocate((Math.ceil(text.length / 64) * 64) + 192);
  const res = new Uint8Array(asm_heap, 192);
  const key_view = new DataView(key.buffer);
  const nonce_view = new DataView(nonce.buffer);
  const buffer3_view = new DataView(asm_heap, 128, 64);

  buffer3_view.setUint32(0, 1634760805, true);
  buffer3_view.setUint32(4, key_view.getUint32(0, true), true);
  buffer3_view.setUint32(8, key_view.getUint32(4, true), true);
  buffer3_view.setUint32(12, key_view.getUint32(8, true), true);
  buffer3_view.setUint32(16, key_view.getUint32(12, true), true);
  buffer3_view.setUint32(20, 857760878, true);
  buffer3_view.setUint32(24, nonce_view.getUint32(0, true), true);
  buffer3_view.setUint32(28, nonce_view.getUint32(4, true), true);
  buffer3_view.setUint32(32, 0, true);
  buffer3_view.setUint32(36, 0, true);
  buffer3_view.setUint32(40, 2036477234, true);
  buffer3_view.setUint32(44, key_view.getUint32(16, true), true);
  buffer3_view.setUint32(48, key_view.getUint32(20, true), true);
  buffer3_view.setUint32(52, key_view.getUint32(24, true), true);
  buffer3_view.setUint32(56, key_view.getUint32(28, true), true);
  buffer3_view.setUint32(60, 1797285236, true);

  res.set(text);
  const blocks = Math.ceil(text.length / 64);
  const asm0 = asm({ Int32Array: Int32Array, Int8Array: Int8Array }, {}, asm_heap);
  asm0._Salsa20(0, 0, blocks);
  return res.slice(0, text.length);

  function asm(global, env, buffer) {
    'use asm';

    var HEAP8 = new global.Int8Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);

    function _Q($0, $1, $2, $3, $4) {
      $0 = $0 | 0;
      $1 = $1 | 0;
      $2 = $2 | 0;
      $3 = $3 | 0;
      $4 = $4 | 0;
      var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
      $5 = $0 + ($1 << 2) | 0;
      $6 = HEAP32[$5 >> 2] | 0;
      $7 = $0 + ($4 << 2) | 0;
      $8 = HEAP32[$7 >> 2] | 0;
      $9 = $8 + $6 | 0;
      $10 = $0 + ($2 << 2) | 0;
      $11 = HEAP32[$10 >> 2] | 0;
      $12 = $9 << 7;
      $13 = $12 ^ $11;
      $14 = $9 >>> 25;
      $15 = $13 ^ $14;
      HEAP32[$10 >> 2] = $15;
      $16 = HEAP32[$5 >> 2] | 0;
      $17 = $15 + $16 | 0;
      $18 = $0 + ($3 << 2) | 0;
      $19 = HEAP32[$18 >> 2] | 0;
      $20 = $17 << 9;
      $21 = $20 ^ $19;
      $22 = $17 >>> 23;
      $23 = $21 ^ $22;
      HEAP32[$18 >> 2] = $23;
      $24 = HEAP32[$10 >> 2] | 0;
      $25 = $23 + $24 | 0;
      $26 = HEAP32[$7 >> 2] | 0;
      $27 = $25 << 13;
      $28 = $27 ^ $26;
      $29 = $25 >>> 19;
      $30 = $28 ^ $29;
      HEAP32[$7 >> 2] = $30;
      $31 = HEAP32[$18 >> 2] | 0;
      $32 = $30 + $31 | 0;
      $33 = HEAP32[$5 >> 2] | 0;
      $34 = $32 << 18;
      $35 = $34 ^ $33;
      $36 = $32 >>> 14;
      $37 = $35 ^ $36;
      HEAP32[$5 >> 2] = $37;
      return;
    }

    function _Salsa20($0, $1, $2) {
      $0 = $0 | 0;
      $1 = $1 | 0;
      $2 = $2 | 0;
      var $$05260 = 0, $$05562 = 0, $$061 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond65 = 0, $exitcond66 = 0;
      $3 = ($2 | 0) == 0;
      if ($3) {
       return;
      }
      $4 = $1 + 96 | 0;
      $5 = $1 + 97 | 0;
      $6 = $1 + 98 | 0;
      $7 = $1 + 99 | 0;
      $8 = $0 + 128 | 0;
      $9 = $0 + 64 | 0;
      $10 = $0 + 132 | 0;
      $11 = $0 + 68 | 0;
      $12 = $0 + 136 | 0;
      $13 = $0 + 72 | 0;
      $14 = $0 + 140 | 0;
      $15 = $0 + 76 | 0;
      $16 = $0 + 144 | 0;
      $17 = $0 + 80 | 0;
      $18 = $0 + 148 | 0;
      $19 = $0 + 84 | 0;
      $20 = $0 + 152 | 0;
      $21 = $0 + 88 | 0;
      $22 = $0 + 156 | 0;
      $23 = $0 + 92 | 0;
      $24 = $0 + 160 | 0;
      $25 = $0 + 96 | 0;
      $26 = $0 + 164 | 0;
      $27 = $0 + 100 | 0;
      $28 = $0 + 168 | 0;
      $29 = $0 + 104 | 0;
      $30 = $0 + 172 | 0;
      $31 = $0 + 108 | 0;
      $32 = $0 + 176 | 0;
      $33 = $0 + 112 | 0;
      $34 = $0 + 180 | 0;
      $35 = $0 + 116 | 0;
      $36 = $0 + 184 | 0;
      $37 = $0 + 120 | 0;
      $38 = $0 + 188 | 0;
      $39 = $0 + 124 | 0;
      $40 = $0 + 64 | 0;
      $41 = $0 + 68 | 0;
      $42 = $0 + 4 | 0;
      $43 = $0 + 72 | 0;
      $44 = $0 + 8 | 0;
      $45 = $0 + 76 | 0;
      $46 = $0 + 12 | 0;
      $47 = $0 + 80 | 0;
      $48 = $0 + 16 | 0;
      $49 = $0 + 84 | 0;
      $50 = $0 + 20 | 0;
      $51 = $0 + 88 | 0;
      $52 = $0 + 24 | 0;
      $53 = $0 + 92 | 0;
      $54 = $0 + 28 | 0;
      $55 = $0 + 96 | 0;
      $56 = $0 + 32 | 0;
      $57 = $0 + 100 | 0;
      $58 = $0 + 36 | 0;
      $59 = $0 + 104 | 0;
      $60 = $0 + 40 | 0;
      $61 = $0 + 108 | 0;
      $62 = $0 + 44 | 0;
      $63 = $0 + 112 | 0;
      $64 = $0 + 48 | 0;
      $65 = $0 + 116 | 0;
      $66 = $0 + 52 | 0;
      $67 = $0 + 120 | 0;
      $68 = $0 + 56 | 0;
      $69 = $0 + 124 | 0;
      $70 = $0 + 60 | 0;
      $$05562 = 0;
      while (1) {
       $71 = HEAP32[$8 >> 2] | 0;
       HEAP32[$9 >> 2] = $71;
       $72 = HEAP32[$10 >> 2] | 0;
       HEAP32[$11 >> 2] = $72;
       $73 = HEAP32[$12 >> 2] | 0;
       HEAP32[$13 >> 2] = $73;
       $74 = HEAP32[$14 >> 2] | 0;
       HEAP32[$15 >> 2] = $74;
       $75 = HEAP32[$16 >> 2] | 0;
       HEAP32[$17 >> 2] = $75;
       $76 = HEAP32[$18 >> 2] | 0;
       HEAP32[$19 >> 2] = $76;
       $77 = HEAP32[$20 >> 2] | 0;
       HEAP32[$21 >> 2] = $77;
       $78 = HEAP32[$22 >> 2] | 0;
       HEAP32[$23 >> 2] = $78;
       $79 = HEAP32[$24 >> 2] | 0;
       HEAP32[$25 >> 2] = $79;
       $80 = HEAP32[$26 >> 2] | 0;
       HEAP32[$27 >> 2] = $80;
       $81 = HEAP32[$28 >> 2] | 0;
       HEAP32[$29 >> 2] = $81;
       $82 = HEAP32[$30 >> 2] | 0;
       HEAP32[$31 >> 2] = $82;
       $83 = HEAP32[$32 >> 2] | 0;
       HEAP32[$33 >> 2] = $83;
       $84 = HEAP32[$34 >> 2] | 0;
       HEAP32[$35 >> 2] = $84;
       $85 = HEAP32[$36 >> 2] | 0;
       HEAP32[$37 >> 2] = $85;
       $86 = HEAP32[$38 >> 2] | 0;
       HEAP32[$39 >> 2] = $86;
       $87 = $$05562 & 255;
       HEAP8[$4 >> 0] = $87;
       $88 = $$05562 >>> 8;
       $89 = $88 & 255;
       HEAP8[$5 >> 0] = $89;
       $90 = $$05562 >>> 16;
       $91 = $90 & 255;
       HEAP8[$6 >> 0] = $91;
       $92 = $$05562 >>> 24;
       $93 = $92 & 255;
       HEAP8[$7 >> 0] = $93;
       $94 = HEAP32[$40 >> 2] | 0;
       HEAP32[$0 >> 2] = $94;
       $95 = HEAP32[$41 >> 2] | 0;
       HEAP32[$42 >> 2] = $95;
       $96 = HEAP32[$43 >> 2] | 0;
       HEAP32[$44 >> 2] = $96;
       $97 = HEAP32[$45 >> 2] | 0;
       HEAP32[$46 >> 2] = $97;
       $98 = HEAP32[$47 >> 2] | 0;
       HEAP32[$48 >> 2] = $98;
       $99 = HEAP32[$49 >> 2] | 0;
       HEAP32[$50 >> 2] = $99;
       $100 = HEAP32[$51 >> 2] | 0;
       HEAP32[$52 >> 2] = $100;
       $101 = HEAP32[$53 >> 2] | 0;
       HEAP32[$54 >> 2] = $101;
       $102 = HEAP32[$55 >> 2] | 0;
       HEAP32[$56 >> 2] = $102;
       $103 = HEAP32[$57 >> 2] | 0;
       HEAP32[$58 >> 2] = $103;
       $104 = HEAP32[$59 >> 2] | 0;
       HEAP32[$60 >> 2] = $104;
       $105 = HEAP32[$61 >> 2] | 0;
       HEAP32[$62 >> 2] = $105;
       $106 = HEAP32[$63 >> 2] | 0;
       HEAP32[$64 >> 2] = $106;
       $107 = HEAP32[$65 >> 2] | 0;
       HEAP32[$66 >> 2] = $107;
       $108 = HEAP32[$67 >> 2] | 0;
       HEAP32[$68 >> 2] = $108;
       $109 = HEAP32[$69 >> 2] | 0;
       HEAP32[$70 >> 2] = $109;
       $$05260 = 0;
       while (1) {
        _Q($0, 0, 4, 8, 12);
        _Q($0, 5, 9, 13, 1);
        _Q($0, 10, 14, 2, 6);
        _Q($0, 15, 3, 7, 11);
        _Q($0, 0, 1, 2, 3);
        _Q($0, 5, 6, 7, 4);
        _Q($0, 10, 11, 8, 9);
        _Q($0, 15, 12, 13, 14);
        $112 = $$05260 + 1 | 0;
        $exitcond = ($112 | 0) == 10;
        if ($exitcond) {
         break;
        } else {
         $$05260 = $112;
        }
       }
       $110 = $$05562 << 4;
       $111 = $110 + 48 | 0;
       $$061 = 0;
       while (1) {
        $114 = $$061 + 16 | 0;
        $115 = $0 + ($114 << 2) | 0;
        $116 = HEAP32[$115 >> 2] | 0;
        $117 = $0 + ($$061 << 2) | 0;
        $118 = HEAP32[$117 >> 2] | 0;
        $119 = $118 + $116 | 0;
        HEAP32[$117 >> 2] = $119;
        $120 = $111 + $$061 | 0;
        $121 = $0 + ($120 << 2) | 0;
        $122 = HEAP32[$121 >> 2] | 0;
        $123 = $122 ^ $119;
        HEAP32[$121 >> 2] = $123;
        $124 = $$061 + 1 | 0;
        $exitcond65 = ($124 | 0) == 16;
        if ($exitcond65) {
         break;
        } else {
         $$061 = $124;
        }
       }
       $113 = $$05562 + 1 | 0;
       $exitcond66 = ($113 | 0) == ($2 | 0);
       if ($exitcond66) {
        break;
       } else {
        $$05562 = $113;
       }
      }
      return;
     }

     return {
        _Salsa20: _Salsa20
     };
  }
}
