import * as heap from "./heap.js";

export function code(key, nonce, text) {
  'use strict';
  const asm_heap = heap.allocate((Math.ceil(text.length / 64) * 64) + 192);
  const res = new Uint8Array(asm_heap, 192);
  const key_view = new DataView(key.buffer);
  const nonce_view = new DataView(nonce.buffer);
  const buffer3_view = new DataView(asm_heap, 128, 64);

  buffer3_view.setUint32(0, 1634760805, true);
  buffer3_view.setUint32(4, key_view.getUint32(0, true), true);
  buffer3_view.setUint32(8, key_view.getUint32(4, true), true);
  buffer3_view.setUint32(12, key_view.getUint32(8, true), true);
  buffer3_view.setUint32(16, key_view.getUint32(12, true), true);
  buffer3_view.setUint32(20, 857760878, true);
  buffer3_view.setUint32(24, nonce_view.getUint32(0, true), true);
  buffer3_view.setUint32(28, nonce_view.getUint32(4, true), true);
  buffer3_view.setUint32(32, 0, true);
  buffer3_view.setUint32(36, 0, true);
  buffer3_view.setUint32(40, 2036477234, true);
  buffer3_view.setUint32(44, key_view.getUint32(16, true), true);
  buffer3_view.setUint32(48, key_view.getUint32(20, true), true);
  buffer3_view.setUint32(52, key_view.getUint32(24, true), true);
  buffer3_view.setUint32(56, key_view.getUint32(28, true), true);
  buffer3_view.setUint32(60, 1797285236, true);

  res.set(text);
  const blocks = Math.ceil(text.length / 64);
  const asm0 = asm({ Int32Array: Int32Array, Int8Array: Int8Array }, {}, asm_heap);
  asm0._Salsa20(0, 0, blocks);
  return res.slice(0, text.length);
}
// artifact compiled from "salsa20.c"
function asm(global, env, buffer) {
  'use asm';
  var a = new global.Int8Array(buffer);
  var c = new global.Int32Array(buffer);
  function _Salsa20(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0, wa = 0, xa = 0, ya = 0, za = 0, Aa = 0, Ba = 0, Ca = 0, Da = 0, Ea = 0, Fa = 0, Ga = 0, Ha = 0, Ia = 0, Ja = 0;
    if (!e) return;
    qa = d + 96 | 0;
    ra = d + 97 | 0;
    sa = d + 98 | 0;
    na = d + 99 | 0;
    oa = b + 48 | 0;
    pa = b + 16 | 0;
    g = b + 32 | 0;
    h = b + 20 | 0;
    i = b + 4 | 0;
    j = b + 36 | 0;
    k = b + 52 | 0;
    l = b + 40 | 0;
    m = b + 24 | 0;
    n = b + 56 | 0;
    o = b + 8 | 0;
    p = b + 60 | 0;
    q = b + 44 | 0;
    r = b + 12 | 0;
    v = b + 28 | 0;
    x = b + 64 | 0;
    A = b + 128 | 0;
    D = b + 132 | 0;
    E = b + 68 | 0;
    I = b + 136 | 0;
    K = b + 72 | 0;
    O = b + 140 | 0;
    Q = b + 76 | 0;
    R = b + 144 | 0;
    S = b + 80 | 0;
    T = b + 148 | 0;
    U = b + 84 | 0;
    V = b + 152 | 0;
    W = b + 88 | 0;
    X = b + 156 | 0;
    Y = b + 92 | 0;
    Z = b + 160 | 0;
    _ = b + 96 | 0;
    $ = b + 164 | 0;
    aa = b + 100 | 0;
    ba = b + 168 | 0;
    ca = b + 104 | 0;
    da = b + 172 | 0;
    ea = b + 108 | 0;
    fa = b + 176 | 0;
    ga = b + 112 | 0;
    ha = b + 180 | 0;
    ia = b + 116 | 0;
    ja = b + 184 | 0;
    ka = b + 120 | 0;
    la = b + 188 | 0;
    ma = b + 124 | 0;
    f = 0;
    do {
    c[x >> 2] = c[A >> 2];
    c[E >> 2] = c[D >> 2];
    c[K >> 2] = c[I >> 2];
    c[Q >> 2] = c[O >> 2];
    c[S >> 2] = c[R >> 2];
    c[U >> 2] = c[T >> 2];
    c[W >> 2] = c[V >> 2];
    c[Y >> 2] = c[X >> 2];
    c[_ >> 2] = c[Z >> 2];
    c[aa >> 2] = c[$ >> 2];
    c[ca >> 2] = c[ba >> 2];
    c[ea >> 2] = c[da >> 2];
    c[ga >> 2] = c[fa >> 2];
    c[ia >> 2] = c[ha >> 2];
    c[ka >> 2] = c[ja >> 2];
    c[ma >> 2] = c[la >> 2];
    a[qa >> 0] = f;
    a[ra >> 0] = f >>> 8;
    a[sa >> 0] = f >>> 16;
    a[na >> 0] = f >>> 24;
    s = c[x >> 2] | 0;
    c[b >> 2] = s;
    z = c[E >> 2] | 0;
    c[i >> 2] = z;
    J = c[K >> 2] | 0;
    c[o >> 2] = J;
    N = c[Q >> 2] | 0;
    c[r >> 2] = N;
    u = c[S >> 2] | 0;
    c[pa >> 2] = u;
    y = c[U >> 2] | 0;
    c[h >> 2] = y;
    G = c[W >> 2] | 0;
    c[m >> 2] = G;
    P = c[Y >> 2] | 0;
    c[v >> 2] = P;
    w = c[_ >> 2] | 0;
    c[g >> 2] = w;
    B = c[aa >> 2] | 0;
    c[j >> 2] = B;
    F = c[ca >> 2] | 0;
    c[l >> 2] = F;
    M = c[ea >> 2] | 0;
    c[q >> 2] = M;
    t = c[ga >> 2] | 0;
    c[oa >> 2] = t;
    C = c[ia >> 2] | 0;
    c[k >> 2] = C;
    H = c[ka >> 2] | 0;
    c[n >> 2] = H;
    L = c[ma >> 2] | 0;
    c[p >> 2] = L;
    d = 0;
    do {
      Da = t + s | 0;
      Da = Da << 7 ^ u ^ Da >>> 25;
      Aa = Da + s | 0;
      Aa = Aa << 9 ^ w ^ Aa >>> 23;
      xa = Aa + Da | 0;
      xa = xa << 13 ^ t ^ xa >>> 19;
      Ga = xa + Aa | 0;
      Ga = Ga << 18 ^ s ^ Ga >>> 14;
      za = z + y | 0;
      za = za << 7 ^ B ^ za >>> 25;
      wa = za + y | 0;
      wa = wa << 9 ^ C ^ wa >>> 23;
      Ja = wa + za | 0;
      Ja = Ja << 13 ^ z ^ Ja >>> 19;
      Ca = Ja + wa | 0;
      Ca = Ca << 18 ^ y ^ Ca >>> 14;
      va = G + F | 0;
      va = va << 7 ^ H ^ va >>> 25;
      Ia = va + F | 0;
      Ia = Ia << 9 ^ J ^ Ia >>> 23;
      Fa = Ia + va | 0;
      Fa = Fa << 13 ^ G ^ Fa >>> 19;
      ya = Fa + Ia | 0;
      ya = ya << 18 ^ F ^ ya >>> 14;
      Ha = M + L | 0;
      Ha = Ha << 7 ^ N ^ Ha >>> 25;
      Ea = Ha + L | 0;
      Ea = Ea << 9 ^ P ^ Ea >>> 23;
      Ba = Ea + Ha | 0;
      Ba = Ba << 13 ^ M ^ Ba >>> 19;
      ua = Ba + Ea | 0;
      ua = ua << 18 ^ L ^ ua >>> 14;
      ta = Ha + Ga | 0;
      z = ta << 7 ^ Ja ^ ta >>> 25;
      ta = z + Ga | 0;
      J = ta << 9 ^ Ia ^ ta >>> 23;
      ta = J + z | 0;
      N = ta << 13 ^ Ha ^ ta >>> 19;
      ta = N + J | 0;
      s = ta << 18 ^ Ga ^ ta >>> 14;
      ta = Da + Ca | 0;
      G = ta << 7 ^ Fa ^ ta >>> 25;
      ta = G + Ca | 0;
      P = ta << 9 ^ Ea ^ ta >>> 23;
      ta = P + G | 0;
      u = ta << 13 ^ Da ^ ta >>> 19;
      ta = u + P | 0;
      y = ta << 18 ^ Ca ^ ta >>> 14;
      ta = za + ya | 0;
      M = ta << 7 ^ Ba ^ ta >>> 25;
      ta = M + ya | 0;
      w = ta << 9 ^ Aa ^ ta >>> 23;
      ta = w + M | 0;
      B = ta << 13 ^ za ^ ta >>> 19;
      ta = B + w | 0;
      F = ta << 18 ^ ya ^ ta >>> 14;
      ta = va + ua | 0;
      t = ta << 7 ^ xa ^ ta >>> 25;
      ta = t + ua | 0;
      C = ta << 9 ^ wa ^ ta >>> 23;
      ta = C + t | 0;
      H = ta << 13 ^ va ^ ta >>> 19;
      ta = H + C | 0;
      L = ta << 18 ^ ua ^ ta >>> 14;
      d = d + 1 | 0;
    } while ((d | 0) != 10);
    c[oa >> 2] = t;
    c[k >> 2] = C;
    c[n >> 2] = H;
    c[p >> 2] = L;
    Ja = f << 4;
    Ha = s + (c[x >> 2] | 0) | 0;
    c[b >> 2] = Ha;
    Ia = b + (Ja + 48 << 2) | 0;
    c[Ia >> 2] = c[Ia >> 2] ^ Ha;
    Ia = z + (c[E >> 2] | 0) | 0;
    c[i >> 2] = Ia;
    Ha = b + (Ja + 49 << 2) | 0;
    c[Ha >> 2] = c[Ha >> 2] ^ Ia;
    Ha = J + (c[K >> 2] | 0) | 0;
    c[o >> 2] = Ha;
    Ia = b + (Ja + 50 << 2) | 0;
    c[Ia >> 2] = c[Ia >> 2] ^ Ha;
    Ia = N + (c[Q >> 2] | 0) | 0;
    c[r >> 2] = Ia;
    Ha = b + (Ja + 51 << 2) | 0;
    c[Ha >> 2] = c[Ha >> 2] ^ Ia;
    Ha = u + (c[S >> 2] | 0) | 0;
    c[pa >> 2] = Ha;
    Ia = b + (Ja + 52 << 2) | 0;
    c[Ia >> 2] = c[Ia >> 2] ^ Ha;
    Ia = y + (c[U >> 2] | 0) | 0;
    c[h >> 2] = Ia;
    Ha = b + (Ja + 53 << 2) | 0;
    c[Ha >> 2] = c[Ha >> 2] ^ Ia;
    Ha = G + (c[W >> 2] | 0) | 0;
    c[m >> 2] = Ha;
    Ia = b + (Ja + 54 << 2) | 0;
    c[Ia >> 2] = c[Ia >> 2] ^ Ha;
    Ia = P + (c[Y >> 2] | 0) | 0;
    c[v >> 2] = Ia;
    Ha = b + (Ja + 55 << 2) | 0;
    c[Ha >> 2] = c[Ha >> 2] ^ Ia;
    Ha = w + (c[_ >> 2] | 0) | 0;
    c[g >> 2] = Ha;
    Ia = b + (Ja + 56 << 2) | 0;
    c[Ia >> 2] = c[Ia >> 2] ^ Ha;
    Ia = B + (c[aa >> 2] | 0) | 0;
    c[j >> 2] = Ia;
    Ha = b + (Ja + 57 << 2) | 0;
    c[Ha >> 2] = c[Ha >> 2] ^ Ia;
    Ha = F + (c[ca >> 2] | 0) | 0;
    c[l >> 2] = Ha;
    Ia = b + (Ja + 58 << 2) | 0;
    c[Ia >> 2] = c[Ia >> 2] ^ Ha;
    Ia = M + (c[ea >> 2] | 0) | 0;
    c[q >> 2] = Ia;
    Ha = b + (Ja + 59 << 2) | 0;
    c[Ha >> 2] = c[Ha >> 2] ^ Ia;
    Ha = (c[oa >> 2] | 0) + (c[ga >> 2] | 0) | 0;
    c[oa >> 2] = Ha;
    Ia = b + (Ja + 60 << 2) | 0;
    c[Ia >> 2] = c[Ia >> 2] ^ Ha;
    Ia = (c[k >> 2] | 0) + (c[ia >> 2] | 0) | 0;
    c[k >> 2] = Ia;
    Ha = b + (Ja + 61 << 2) | 0;
    c[Ha >> 2] = c[Ha >> 2] ^ Ia;
    Ha = (c[n >> 2] | 0) + (c[ka >> 2] | 0) | 0;
    c[n >> 2] = Ha;
    Ia = b + (Ja + 62 << 2) | 0;
    c[Ia >> 2] = c[Ia >> 2] ^ Ha;
    Ia = (c[p >> 2] | 0) + (c[ma >> 2] | 0) | 0;
    c[p >> 2] = Ia;
    Ja = b + (Ja + 63 << 2) | 0;
    c[Ja >> 2] = c[Ja >> 2] ^ Ia;
    f = f + 1 | 0;
    } while ((f | 0) != (e | 0));
    return;
  }
  return {
    _Salsa20: _Salsa20
  };
}
